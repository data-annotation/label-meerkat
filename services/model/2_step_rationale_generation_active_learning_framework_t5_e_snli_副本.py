# -*- coding: utf-8 -*-
"""2-Step_Rationale_Generation_Active_Learning_Framework_T5_e-SNLI-副本.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10E0TFrLM2bAKZ5KDj8tC8Hdi6nlSl2vd
"""

# !pip show torchvision
#
# !nvidia-smi

"""if the whole pipeline runs on a server, best to preload all the pre-trained models' weights instead of downloading on the fly

##### install depedency
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install transformers==3.4.0
# !pip install pytorch_lightning
# !pip install SentencePiece==0.1.94
# !pip install datasets
# !pip install rouge-score
# !pip install rouge


"""##### download sentence transformer"""



# !pip install -U sentence-transformers
# !git lfs install
# !git clone https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2
#
# !zip -r model_SentenceTransformer.zip /content/all-MiniLM-L6-v2


# from sentence_transformers import SentenceTransformer, util
# import torch 

# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# model_sentencetransformer = SentenceTransformer("/content/all-MiniLM-L6-v2")

# ===========
# USAGE OF SENTENCETRANSFORMER
# ===========

# sentences1 = ["Hello World", "Hallo Welt", "hello Earth"]
# sentences2 = ["Hello Earth", "Hallo Welt", "hello World"]
# embeddings1 = model_sentencetransformer.encode(sentences1, convert_to_tensor=True).to(device)
# embeddings2 = model_sentencetransformer.encode(sentences2, convert_to_tensor=True).to(device)
# print(embeddings1.shape)

# cosine_scores = util.cos_sim(embeddings1, embeddings2)
# print(cosine_scores.shape)
# print(cosine_scores)
# mean_cosine_scores = torch.mean(cosine_scores, 1, True)
# print(mean_cosine_scores)
# # mean_cosine_scores.tolist()
# mean_cosine_scores_list = [i.item() for i in mean_cosine_scores]
# print(sentences)
# print(mean_cosine_scores_list)

# # num_batch = 2
# # # top 2
# # idx = sorted(range(len(a)), key=lambda i: a[i])[-num_batch:]
# # idx = sorted(range(len(a)), key=lambda i: a[i])[-num_batch/2:]
# # print(idx)



import torch
from transformers import T5Tokenizer
from sentence_transformers import SentenceTransformer, util

device = 'cuda' if torch.cuda.is_available() else 'cpu'

print("Device: ", device)

tokenizer = T5Tokenizer.from_pretrained('t5-base')
tokenizer.add_special_tokens({'sep_token': '<sep>'})

model_SentenceTransformer = SentenceTransformer(SentenceTransformer_PATH)

"""##### Pre-processing function for each Iteration"""

label = ['entailment', 'neutral', 'contradiction']

"""todo: editable """

def rationale_model_define_input(example):
    label_content = ""
    for i in range(len(label)):
      label_content += 'choice' + str(i+1) + ': ' + str(label[i]) + ' '

    example['input_text'] = ('explain: what is the relationship between %s and %s ' % (example['hypothesis'], example['premise']) ) + label_content 
    example['target_text'] = '%s' % example['explanation_1']

    return example

def prediction_model_define_input(example):
    label_content = ""
    for i in range(len(label)):
      label_content += 'choice' + str(i+1) + ': ' + str(label[i]) + ' '


    example['input_text'] = ('question: what is the relationship between %s and %s ' % (example['hypothesis'], example['premise']) ) + label_content + (' <sep> because %s' % (example['generated_rationale']) )
    example['target_text'] = '%s' % label[ int(example['label']) ]

    return example

# ===========
# ORIGINAL INPUT FORMAT
# ===========

# def rationale_model_define_input(example):
#     example['input_text'] = 'explain: what is the relationship between %s and %s choice1: entailment choice2: neutral choice3: contradiction' % (example['hypothesis'], example['premise'])
#     example['target_text'] = '%s' % example['explanation_1']

#     return example

# def prediction_model_define_input(example):
#     example['input_text'] = 'question: what is the relationship between %s and %s choice1: entailment choice2: neutral choice3: contradiction <sep> because %s' % (example['hypothesis'], example['premise'], example['generated_rationale'])
#     example['target_text'] = '%s' % label[ int(example['label']) ]

#     return example

def convert_to_features(example_batch):
    input_encodings = tokenizer.batch_encode_plus(example_batch['input_text'], add_special_tokens=True, truncation=True, pad_to_max_length=True, max_length=512)
    target_encodings = tokenizer.batch_encode_plus(example_batch['target_text'], add_special_tokens=True, truncation=True, pad_to_max_length=True, max_length=64)

    encodings = {
        'input_ids': input_encodings['input_ids'], 
        'attention_mask': input_encodings['attention_mask'],
        'target_ids': target_encodings['input_ids'],
        'target_attention_mask': target_encodings['attention_mask']
    }

    return encodings

def rationale_model_preprocessing(input_dataset):
  input_dataset = input_dataset.map(rationale_model_define_input, load_from_cache_file=False)

  # print(input_dataset[0])

  input_dataset = input_dataset.map(convert_to_features, batched=True, load_from_cache_file=False)

  

  columns = ['input_ids', 'target_ids', 'attention_mask', 'target_attention_mask']
  input_dataset.set_format(type='torch', columns=columns)
  return input_dataset

def prediction_model_preprocessing(input_dataset):
  input_dataset = input_dataset.map(prediction_model_define_input, load_from_cache_file=False)
  input_dataset = input_dataset.map(convert_to_features, batched=True, load_from_cache_file=False)

  columns = ['input_ids', 'target_ids', 'attention_mask', 'target_attention_mask']
  input_dataset.set_format(type='torch', columns=columns)
  return input_dataset

"""##### Dataset Concatenation function

we found the built-in concatenation function will freeze after ~10 consecutive calls
"""

def custom_concatenate(dataset1, dataset2, dataset3):
  new_dataset = {}
  
  for key in dataset1.features.keys():
    if key != 'Unnamed: 0': 
      new_dataset[key] = []

  for example in dataset1:
    for key in example:
      if key != 'Unnamed: 0':
        new_dataset[key].append( example[key] )

  for example in dataset2:
    for key in example:
      if key != 'Unnamed: 0':
        new_dataset[key].append( example[key] )

  for example in dataset3:
    for key in example:
      if key != 'Unnamed: 0':
        new_dataset[key].append( example[key] )


  new_dataset = Dataset.from_dict(new_dataset)
  
  return new_dataset 

def custom_concatenate_2(dataset1, dataset2):
  new_dataset = {}

  for key in dataset1.features.keys():
    if key != 'Unnamed: 0':
      new_dataset[key] = []

  for example in dataset1:
    for key in example:
      if key != 'Unnamed: 0':
        new_dataset[key].append( example[key] )

  for example in dataset2:
    for key in example:
      if key != 'Unnamed: 0':
        new_dataset[key].append( example[key] )

  new_dataset = Dataset.from_dict(new_dataset)

  return new_dataset

"""##### Batch selection function(s)

Let's start with random one (will add fancier stuff once the pipeline is working on the server)
"""

import random
from datasets import concatenate_datasets

def random_batch_selection(train_dataset, num_batch):
  sampled_idx = random.sample( list( range(len(train_dataset)) ), num_batch )

  remaining_idx = list( range(len(train_dataset)) )
  for i in sampled_idx:
    remaining_idx.remove(i)

  # batch_dataset = train_dataset.select(sampled_idx)
  # remain_dataset = train_dataset.select(remaining_idx)
  #return batch_dataset, remain_dataset
  return train_dataset.select(sampled_idx), train_dataset.select(remaining_idx)

# ===========
# SPACE RESERVED FOR OTHER DATA SELECTORS
# ===========

"""##### data selection function"""

def batch_selection(train_dataset, num_batch, criteria, current_iter, previous_batch_train_dataset):

  ## we are pre-splitting data by label
  ## which is not exactly what the real world should be 
  train_dataset_zero = train_dataset.filter(lambda example: example["label"] == 0)
  train_dataset_one = train_dataset.filter(lambda example: example["label"] == 1)
  train_dataset_two = train_dataset.filter(lambda example: example["label"] == 2)
  print( len(train_dataset_zero), len(train_dataset_one), len(train_dataset_two) )


  if criteria == 'random':
    batch_train_dataset_zero, remain_train_dataset_zero = random_batch_selection(train_dataset_zero, num_batch)
    batch_train_dataset_one, remain_train_dataset_one = random_batch_selection(train_dataset_one, num_batch)  
    batch_train_dataset_two, remain_train_dataset_two = random_batch_selection(train_dataset_two, num_batch)
  # else:
  #   batch_train_dataset_zero, remain_train_dataset_zero = similarity_batch_selection(train_dataset_zero, num_batch, criteria, current_iter, previous_batch_train_dataset)
  #   batch_train_dataset_one, remain_train_dataset_one = similarity_batch_selection(train_dataset_one, num_batch, criteria, current_iter, previous_batch_train_dataset)
  #   batch_train_dataset_two, remain_train_dataset_two = similarity_batch_selection(train_dataset_two, num_batch, criteria, current_iter, previous_batch_train_dataset)


  batch_dataset = custom_concatenate(batch_train_dataset_zero, batch_train_dataset_one, batch_train_dataset_two)
  remain_dataset = custom_concatenate(remain_train_dataset_zero, remain_train_dataset_one, remain_train_dataset_two)
  #previous_batch_train_dataset = copy.deepcopy(batch_dataset)
  # previous_batch_train_dataset = batch_dataset
  previous_batch_train_dataset = custom_concatenate_2(batch_dataset, previous_batch_train_dataset)

  ##batch_dataset = batch_dataset.remove_columns(['Unnamed: 0'])

  print(batch_dataset)
  print('---')
  print(remain_dataset)
  

  print("Finish batch selection by ", criteria, len(batch_dataset), len(remain_dataset))
  
  return batch_dataset, remain_dataset, previous_batch_train_dataset

"""##### prediction function """

from tqdm.auto import tqdm

def prediction_model_accuracy(predictions, references, flag, iteration):
  correct = total = 0

  for groundtruths, prediction in zip(references, predictions):
    total += 1

    if groundtruths == prediction:
      correct += 1
  accuracy = correct / total
  print("total test examples: ", total)
  print("prediction model accuracy: ", accuracy)
  if flag != 'ignore':
    print("RESULTS: [# current iteration %d], [# data per label %d], [# epoch RG %d], [# epoch P %d], [Learning Rate %f], [Batch size per device %d], [Select %s], [Accuracy %f]" % (iteration, num_data_per_batch, num_epochs_rg, num_epochs_p, learning_rate, per_device_batch_size, flag, accuracy))

# def rationale_model_accuracy(predictions, references):
#   score = total = 0
#   for groundtruths, prediction in zip(references, predictions):
#     total += 1

#     res = scorer.score(groundtruths, prediction)['rougeL'].fmeasure

#     score += res
  
#   print("rationale model ROUGE-L: ", score/len(predictions) )



def predict(test_dataset, model_name, model_path, flag, iteration):
  model = T5ForConditionalGeneration.from_pretrained(model_path).to(device) 
  tokenizer = T5Tokenizer.from_pretrained(model_path)

  # os.makedirs(TEMP_FOLDER_PATH + 'rationale_model_' + str(index) )
  # os.makedirs(TEMP_FOLDER_PATH + 'prediction_model_' + str(index) )
  # shutil.rmtree(TEMP_FOLDER_PATH+'rationale_model_'+str(index))
  # shutil.rmtree(TEMP_FOLDER_PATH+'prediction_model_'+str(index))
  '''
  ## CLEANING CODE

  shutil.rmtree(model_path)
  
  if not os.path.exists(model_path):
    os.makedirs(model_path)

  model.save_pretrained(model_path) 
  ##tokenizer.save_pretrained(model_path)
  print(" - successfully clean model saving folder")
  '''
  dataloader = torch.utils.data.DataLoader(test_dataset, batch_size=32)

  answers = []
  for batch in tqdm(dataloader):
    outs = model.generate(input_ids=batch['input_ids'].to(device), 
        attention_mask=batch['attention_mask'].to(device),
        max_length=64,
        early_stopping=True)
    outs = [tokenizer.decode(ids, skip_special_tokens=True).encode('utf-8').decode('utf-8') for ids in outs]
    answers.extend(outs)

  predictions = []
  references = []
  for ref, pred in zip(test_dataset, answers):
    predictions.append(pred)
    # references.append(ref['answer'])

    references.append( tokenizer.decode(ref['target_ids'], skip_special_tokens=True) )

  print("1st predicted:", predictions[0])
  print("1st groundtruth:", references[0])
  assert len(predictions) == len(references)
  # print(len(predictions), len(references))

  if model_name == 'prediction':
    prediction_model_accuracy(predictions, references, flag, iteration)
  ##elif model_name == 'rationale':
  ##  rationale_model_accuracy(predictions, references)

  
  return predictions

"""##### model architecture

we add a special token above, need to add here for the trainer as well
"""

import dataclasses
import logging
import os
import sys
from dataclasses import dataclass, field
from typing import Dict, List, Optional

import numpy as np
import torch

from transformers import T5ForConditionalGeneration, T5Tokenizer, EvalPrediction
from transformers import (
    HfArgumentParser,
    DataCollator,
    Trainer,
    TrainingArguments,
    set_seed,
)


logger = logging.getLogger(__name__)

# prepares lm_labels from target_ids, returns examples with keys as expected by the forward method
# this is necessacry because the trainer directly passes this dict as arguments to the model
# so make sure the keys match the parameter names of the forward method
@dataclass
class T2TDataCollator():
    def __call__(self, batch: List) -> Dict[str, torch.Tensor]:
        """
        Take a list of samples from a Dataset and collate them into a batch.
        Returns:
            A dictionary of tensors
        """

        input_ids = torch.stack([example['input_ids'] for example in batch])   
        labels = torch.stack([example['target_ids'] for example in batch])
        labels[labels[:, :] == 0] = -100
        attention_mask = torch.stack([example['attention_mask'] for example in batch])
        decoder_attention_mask = torch.stack([example['target_attention_mask'] for example in batch])
        

        return {
            'input_ids': input_ids, 
            'attention_mask': attention_mask,
            'labels': labels, 
            'decoder_attention_mask': decoder_attention_mask
        }


@dataclass
class ModelArguments:
    """
    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.
    """

    model_name_or_path: str = field(
        metadata={"help": "Path to pretrained model or model identifier from huggingface.co/models"}
    )
    tokenizer_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
    )
    cache_dir: Optional[str] = field(
        default=None, metadata={"help": "Where do you want to store the pretrained models downloaded from s3"}
    )

@dataclass
class DataTrainingArguments:
    """
    Arguments pertaining to what data we are going to input our model for training and eval.
    """
    train_file_path: Optional[str] = field(
        default='train_data.pt',
        metadata={"help": "Path for cached train dataset"},
    )
    valid_file_path: Optional[str] = field(
        default='valid_data.pt',
        metadata={"help": "Path for cached valid dataset"},
    )
    max_len: Optional[int] = field(
        default=512,
        metadata={"help": "Max input length for the source text"},
    )
    target_max_len: Optional[int] = field(
        default=32,
        metadata={"help": "Max input length for the target text"},
    )


def finetune(config_json):
    # See all possible arguments in src/transformers/training_args.py
    # or by passing the --help flag to this script.
    # We now keep distinct sets of args, for a cleaner separation of concerns.

    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))

    # we will load the arguments from a json file, 
    #make sure you save the arguments in at ./args.json
    model_args, data_args, training_args = parser.parse_dict( config_json )

    if (
        os.path.exists(training_args.output_dir)
        and os.listdir(training_args.output_dir)
        and training_args.do_train
        and not training_args.overwrite_output_dir
    ):
        raise ValueError(
            f"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome."
        )

    # Setup logging
    logging.basicConfig(
        format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",
        datefmt="%m/%d/%Y %H:%M:%S",
        level=logging.INFO if training_args.local_rank in [-1, 0] else logging.WARN,
    )
    logger.warning(
        "Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s",
        training_args.local_rank,
        training_args.device,
        training_args.n_gpu,
        bool(training_args.local_rank != -1),
        training_args.fp16,
    )
    logger.info("Training/evaluation parameters %s", training_args)

    # Set seed
    set_seed(training_args.seed)

    # Load pretrained model and tokenizer
    #
    # Distributed training:
    # The .from_pretrained methods guarantee that only one local process can concurrently
    # download model & vocab.


    tokenizer = T5Tokenizer.from_pretrained(
        model_args.tokenizer_name if model_args.tokenizer_name else model_args.model_name_or_path,
        # cache_dir=model_args.cache_dir,
    )
    tokenizer.add_special_tokens({'sep_token': '<sep>'})

    model = T5ForConditionalGeneration.from_pretrained(
        model_args.model_name_or_path,
        # cache_dir=model_args.cache_dir,
    )

    # Get datasets
    print('loading data')
    train_dataset  = torch.load(data_args.train_file_path)
    valid_dataset = torch.load(data_args.valid_file_path)
    print('loading done')

    # Initialize our Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=valid_dataset,
        data_collator=T2TDataCollator()
    )

    # Training
    if training_args.do_train:
        trainer.train(
            model_path=model_args.model_name_or_path if os.path.isdir(model_args.model_name_or_path) else None
        )
        trainer.save_model()
        # For convenience, we also re-save the tokenizer to the same directory,
        # so that you can share your model easily on huggingface.co/models =)
        if trainer.is_world_process_zero():
            tokenizer.save_pretrained(training_args.output_dir)

    # Evaluation
    results = {}
    if training_args.do_eval and training_args.local_rank in [-1, 0]:
        logger.info("*** Evaluate ***")

        eval_output = trainer.evaluate()

        output_eval_file = os.path.join(training_args.output_dir, "eval_results.txt")
        with open(output_eval_file, "w") as writer:
            logger.info("***** Eval results *****")
            for key in sorted(eval_output.keys()):
                logger.info("  %s = %s", key, str(eval_output[key]))
                writer.write("%s = %s\n" % (key, str(eval_output[key])))
    
        results.update(eval_output)
    
    return results

# def _mp_fn(index):
#     # For xla_spawn (TPUs)
#     main()




"""### Active Learning Loop

hyperparameters
"""

import json

# for full dataset
# num_data_per_batch = -1

num_iter = 1
num_data_per_batch = 10
num_epochs_rg = 100
num_epochs_p = 100
learning_rate = 1e-4
per_device_batch_size = 2

# Load the complete data into lists
# Load val/test split into dataset.pt (not being modified during fine-tuning)

import datasets
from datasets import Dataset
from datasets import load_dataset

Dataset.from_list()

full_train_dataset = load_dataset('esnli', split='train')
# valid_dataset = load_dataset('esnli', split='validation')
test_dataset = load_dataset('esnli', split='test')

train_dataset = batch_selection( full_train_dataset, 3000, 'random', -1, [] )[0]

sampled_test_dataset = batch_selection( test_dataset, 300, 'random', -1, [] )[0]
rationale_dataset_test_dataset = rationale_model_preprocessing( sampled_test_dataset )

print("# data subsampled from train split: ", len(train_dataset))

"""##### active learning function

the temp folders are removed after AL finish
"""

# !mkdir rationale_model_data
# !mkdir prediction_model_data
#
# !mkdir rationale_model
# !mkdir prediction_model


import os
import copy
def active_learning(criteria):
 
  batch_train_dataset = []
  remain_train_dataset = [] 
  previous_batch_train_dataset = []

  print("=== Active Learning with %s selector ===" % (criteria) )

  for curr_iter in range(num_iter):

    print('=== Start Batch Selection %d per label with %s ===' % (num_data_per_batch, criteria) )
    ## select a batch of data from train split
    if curr_iter == 0:
      if num_data_per_batch != -1:
        batch_train_dataset, remain_train_dataset, previous_batch_train_dataset = batch_selection( train_dataset, num_data_per_batch, criteria, 0, previous_batch_train_dataset )
      else:
        batch_train_dataset = train_dataset
    else:
      batch_train_dataset, remain_train_dataset, previous_batch_train_dataset = batch_selection( remain_train_dataset, num_data_per_batch, criteria, curr_iter, previous_batch_train_dataset )  
    
    # previous_batch_train_dataset = copy.deepcopy(batch_train_dataset)

    print("=== Finish Batch Selection ===")
    print("At Iteration %d, %d data selected, %d data remain " %( curr_iter, len(batch_train_dataset), len(remain_train_dataset)) )

    ## preprocess batch_train_dict
    rationale_model_batch_train_dataset = rationale_model_preprocessing( batch_train_dataset )
    torch.save(rationale_model_batch_train_dataset, "rationale_model_data/train_data.pt")
    torch.save(rationale_model_batch_train_dataset, "rationale_model_data/valid_data.pt")

    ## fine-tune rationale model
    # set config and load model (1st time load pretrained model)
    rationale_model_config_json = {}
    if curr_iter == 0:
      rationale_model_config_json = {
      "model_name_or_path": 't5-base',
      "tokenizer_name": 't5-base',
      "max_len": 512 ,
      "target_max_len": 64,
      "train_file_path": 'rationale_model_data/train_data.pt',
      "valid_file_path": 'rationale_model_data/valid_data.pt',
      "output_dir": 'rationale_model/',
      "overwrite_output_dir": True,
      "per_device_train_batch_size": per_device_batch_size,
      "per_device_eval_batch_size": per_device_batch_size,
      "gradient_accumulation_steps": 6,
      "learning_rate": learning_rate,
      "num_train_epochs": num_epochs_rg,
      "do_train": True,
      "do_eval": False,
      "prediction_loss_only": True,
      "remove_unused_columns": False,
      "save_strategy": 'no',
      "evaluation_strategy": 'no',
      "save_total_limit": 1,
      "load_best_model_at_end": True
      }
    else:
      rationale_model_config_json = {
      "model_name_or_path": 'rationale_model/',
      "tokenizer_name": 'rationale_model/',
      "max_len": 512 ,
      "target_max_len": 64,
      "train_file_path": 'rationale_model_data/train_data.pt',
      "valid_file_path": 'rationale_model_data/valid_data.pt',
      "output_dir": 'rationale_model/',
      "overwrite_output_dir": True,
      "per_device_train_batch_size": per_device_batch_size,
      "per_device_eval_batch_size": per_device_batch_size,
      "gradient_accumulation_steps": 6,
      "learning_rate": learning_rate,
      "num_train_epochs": num_epochs_rg,
      "do_train": True,
      "do_eval": False,
      "prediction_loss_only": True,
      "remove_unused_columns": False,
      "save_strategy": 'no',
      "evaluation_strategy": 'no',
      "save_total_limit": 1,
      "load_best_model_at_end": True
      }

    ##print("=== START FINETUNE MODEL RG ===")

    finetune(rationale_model_config_json)

    ##print("=== START GENERATE RATIONALE FOR MODEL P ===")

    predicted_rationale = predict(rationale_model_batch_train_dataset, 'rationale', 'rationale_model/', 'ignore', curr_iter )

    ## preprocess generated rationales
    prediction_model_batch_train_dataset = batch_train_dataset.add_column("generated_rationale", predicted_rationale)
    prediction_model_batch_train_dataset = prediction_model_preprocessing( prediction_model_batch_train_dataset )
    torch.save(prediction_model_batch_train_dataset, 'prediction_model_data/train_data.pt')
    torch.save(prediction_model_batch_train_dataset, 'prediction_model_data/valid_data.pt')

    print("=== FINISH FINETUNE MODEL RG AT ITERATION %d ===" % (curr_iter))


    ## fine-tune prediction model
    # set config and load model (1st time load pretrained model)
    prediction_model_config_json = {}
    if curr_iter == 0:
      prediction_model_config_json = {
      "model_name_or_path": 't5-base',
      "tokenizer_name": 't5-base',
      "max_len": 512 ,
      "target_max_len": 64,
      "train_file_path": 'prediction_model_data/train_data.pt',
      "valid_file_path": 'prediction_model_data/valid_data.pt',
      "output_dir": 'prediction_model/',
      "overwrite_output_dir": True,
      "per_device_train_batch_size": per_device_batch_size,
      "per_device_eval_batch_size": per_device_batch_size,
      "gradient_accumulation_steps": 6,
      "learning_rate": 1e-4,
      "num_train_epochs": num_epochs_p,
      "do_train": True,
      "do_eval": False,
      "prediction_loss_only": True,
      "remove_unused_columns": False,
      "save_strategy": 'no',
      "evaluation_strategy": 'no',
      "save_total_limit": 1,
      "load_best_model_at_end": True
      }
    else:
      prediction_model_config_json = {
      "model_name_or_path": 'prediction_model/',
      "tokenizer_name": 'prediction_model/',
      "max_len": 512 ,
      "target_max_len": 64,
      "train_file_path": 'prediction_model_data/train_data.pt',
      "valid_file_path": 'prediction_model_data/valid_data.pt',
      "output_dir": 'prediction_model/',
      "overwrite_output_dir": True,
      "per_device_train_batch_size": per_device_batch_size,
      "per_device_eval_batch_size": per_device_batch_size,
      "gradient_accumulation_steps": 6,
      "learning_rate": 1e-4,
      "num_train_epochs": num_epochs_p,
      "do_train": True,
      "do_eval": False,
      "prediction_loss_only": True,
      "remove_unused_columns": False,
      "save_strategy": 'no',
      "evaluation_strategy": 'no',
      "save_total_limit": 1,
      "load_best_model_at_end": True
      }
  
    ##print("=== START FINETUNE MODEL P ===")

    finetune(prediction_model_config_json)
    
    print("=== FINISH FINETUNE MODEL P AT ITERATION %d ===" % (curr_iter))
 
    
    print("=== START EVALUATION AT ITERATION %d ===" %(curr_iter) )
  
    predicted_rationale = predict(rationale_dataset_test_dataset, 'rationale', 'rationale_model/', 'ignore', curr_iter)
    prediction_model_test_dataset = sampled_test_dataset.add_column("generated_rationale", predicted_rationale)
    prediction_model_test_dataset = prediction_model_preprocessing( prediction_model_test_dataset )
    predicted_model_prediction = predict(prediction_model_test_dataset, 'prediction', 'prediction_model/', criteria, curr_iter)

    # GARBAGE COLLECTION
    del prediction_model_test_dataset
    del predicted_rationale
    del rationale_model_batch_train_dataset
    del prediction_model_batch_train_dataset


  '''
  print("=== START PIPELINE EVALUATION ===")

  predicted_rationale = predict(rationale_dataset_test_dataset, 'rationale', TEMP_FOLDER_PATH+'rationale_model_'+str(index), 'ignore')
  prediction_model_test_dataset = test_dataset.add_column("generated_rationale", predicted_rationale)
  prediction_model_test_dataset = prediction_model_preprocessing( prediction_model_test_dataset )
  
  predicted_prediction = predict(prediction_model_test_dataset, 'prediction', TEMP_FOLDER_PATH+'prediction_model_'+str(index), criteria)
  '''
  
  import shutil

  shutil.rmtree('rationale_model_data/')
  shutil.rmtree('prediction_model_data/')
  shutil.rmtree('rationale_model/')
  shutil.rmtree('prediction_model/')

"""## CALL"""

active_learning('random')

